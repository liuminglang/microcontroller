int pinMusic = 13;
 
// 定义三维整型数组,用于存乐谱
// 第一维度存放音调,第二维度用于提升或降低8度,第三维度存放一个音的持续时间
int music[][3] = {{1,1,4}}; // 像这样定义一个乐谱

int* getNotes(int music[][3], int i)
{
  if(i>=0)
  {
    return music[i];
  }
  else
  {
    return nullptr;
  }
}
void playMusic(int music[][3], int length) // 用于演奏的函数
{
  for (int i=0; i<length; i++)
  {
    int* note = getNotes(music,i);
    int* prenote = getNotes(music,i-1);
    if (note[0] == 0) // 休止符
    {
      int t1 = 2500 / note[2];
      noTone(pinMusic);
      delay(t1);
    }
    else // 音符
    {
      int s1,s2,t1,t2;
      s2=-114;
      t2=-114;
      readNotes(note[0],note[1],note[2],s1,t1);
      if (prenote)
      {
        readNotes(prenote[0],prenote[1],prenote[2],s2,t2);
      }
      if (s2 != s1)
      {
        noTone(pinMusic);
        tone(pinMusic,s1);
      }
      delay(t1);
    }
    delay(100); // 两个音之间的短暂间隔
  }
  noTone(pinMusic);
}
 
// 把 1 - 7 映射到 音调频率表
int noteTable[7][3] = {{262,523,1046},{294,587,1175},{330,659,1318},{349,698,1397},
{392,784,1568},{440,880,1760},{494,988,1967}};
 
void readNotes(int sound, int jump, int time, int& S, int& T) // 用于读谱的函数
{
  S = noteTable[sound-1][jump+1]; // 解析当前音符的音调,转换成蜂鸣器对应的频率
  T = 2500 / time; // 解析当前音符的持续时间
}

int Swaytomybeatincosmos[][3] = {
  {5,0,8},{1,0,8},{1,0,8},{5,0,8},{1,0,8},{5,0,8},
  {5,-1,11},{6,-1,16},{1,0,11},
  {2,0,6},{6,-1,8},{2,0,8},{6,-1,8},{2,0,8},{6,-1,8},
  {5,-1,11},{6,-1,16},{1,0,11},{2,0,32},
  {5,0,8},{1,0,8},{1,0,8},{5,0,8},{1,0,8},{5,0,8},
  {5,-1,11},{6,-1,16},{1,0,11},
  {2,0,6},{5,-1,8},{2,0,8},{5,-1,8},
  {2,0,11},{5,-1,32},{1,0,11},{2,0,4},
  {0,0,8},{1,0,4},{6,-1,8},{1,0,8},{2,0,4},{1,0,16},{6,-1,16},
  {1,0,4},{1,0,8},{1,0,16},{6,-1,16},{1,0,8},{1,0,16},{5,-1,16},{5,-1,4},
  {0,0,8},{1,0,2},{2,0,4},{1,0,8},{5,0,4},{0,0,8},{4,0,16},{3,0,16},
  {3,0,8},{1,0,16},{2,0,16},{2,0,4},
  {0,0,8},{1,0,4},{6,-1,8},{1,0,8},{2,0,4},{1,0,16},{6,-1,16},
  {1,0,4},{1,0,8},{6,-1,8},{1,0,8},{1,0,16},{5,-1,16},{5,-1,4},
  {0,0,8},{1,0,8},{1,0,4},{5,0,4},{5,0,8},{4,0,8},
  {3,0,8},{2,0,8},{0,0,8},{1,0,16},{2,0,16},{3,0,8},{1,0,16},{2,0,16},{2,0,4},
  {3,0,8},{1,0,8},{2,0,8},{1,0,16},{6,-1,16},{6,-1,2},
  {0,0,8},{6,-1,8},{1,0,8},{1,0,16},{5,-1,16},{5,-1,2},
  {5,0,2},{5,0,4},{4,0,4},
  {3,0,8},{3,0,16},{5,0,16},{5,0,4},{0,0,4},{5,0,16},{4,0,16},{3,0,16},{4,0,16},
  {3,0,8},{1,0,4},{1,0,8},{0,0,4},{0,0,8},{1,0,16},{2,0,16},
  {3,0,4},{1,0,4},{2,0,4},{1,0,8},{1,0,16},{3,0,16},
  {3,0,8},{2,0,8},{2,0,16},{3,0,16},{3,0,8},{5,0,4},{4,0,4},
  {3,0,16},{3,0,8},{5,0,16},{5,0,4},{0,0,4},{5,0,16},{5,0,8},{1,1,8},
  {5,0,8},{6,0,8},{3,0,8},{5,0,16},{5,0,4},{0,0,8},{1,0,16},{2,0,16},
  {3,0,4},{1,0,4},{2,0,8},{2,0,16},{1,0,16},{1,0,8},{3,0,8},
  {3,0,16},{2,0,8},{2,0,16},{3,0,4},{5,0,8},{5,0,16},{4,0,16},{4,0,8},{3,0,8},
  {1,0,2},{1,0,4},{0,0,4},
  {0,0,1},
  {0,0,8},{1,0,4},{6,-1,8},{1,0,8},{2,0,4},{1,0,16},{6,-1,16},
  {1,0,4},{1,0,8},{1,0,16},{6,-1,16},{1,0,8},{1,0,16},{5,-1,16},{5,-1,4},
  {0,0,8},{1,0,4},{6,-1,8},{1,0,8},{2,0,4},{1,0,16},{6,-1,16},
  {1,0,4},{1,0,8},{1,0,16},{6,-1,16},{1,0,8},{1,0,16},{5,-1,16},{5,-1,4},
  {0,0,8},{1,0,2},{2,0,4},{1,0,8}
};
void setup()
{
  Serial.begin(9600);
  Serial.print("start initalizing");
  delay(1000);
  Serial.print(".");
  delay(1000);
  Serial.print(".");
  delay(1000);
  Serial.println(".");
  delay(200);
  Serial.println("Successfully initalizing");
  // 演奏方法：
  // 先定义 int num = sizeof(乐谱名)/sizeof(乐谱名[0]);
  // 然后调用 playMusic(乐谱名, num);
}
 
void loop()
{
  Serial.println("start playing");
  int num = sizeof(Swaytomybeatincosmos)/sizeof(Swaytomybeatincosmos[0]);
  playMusic(Swaytomybeatincosmos, num);
  Serial.println("end playing");
  delay(1000);
}
